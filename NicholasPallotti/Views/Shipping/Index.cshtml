
@model NicholasPallotti.Models.PackageViewModel

@{
    ViewBag.Title = "Shipping Page";
}

<style type="text/css">


    .FormTable {
        margin-left: 25px;
        margin-top: 25px;
        margin-bottom: 25px;
    }

        .FormTable td {
            padding: 10px;
        }

    fieldset {
        display: inline-block;
        border-color: darkmagenta;
        margin-top: 20px;
        width: 40%;
    }

    .MailingLabel {
        background-color: white;
        border: solid 2px black;
        display: inline-block;
        margin-left: 50px;
        padding: 5px;
        min-width: 250px;
        min-height: 75px;
    }

    /*text of the error message*/
    .field-validation-error {
        color: red;
    }
    /*hide the error message if the field is valid*/
    .field-validation-valid {
        display: none;
    }
    /*red border around field in error*/
    .input-validation-error {
        border: 1px solid red;
    }
</style>

<h2>this is the shipping page</h2>

@using (Html.BeginForm("Index", "Shipping", new { Area = "" }, FormMethod.Post, new { id = "ShippingForm" }))
{
    <fieldset>
        <legend>From</legend>
        <table class="FormTable">

            <tr>
                <td>@Html.LabelFor(m => m.package.Sender.FirstName, "First Name")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.Sender.FirstName)
                    @Html.ValidationMessageFor(m => m.package.Sender.FirstName, "First Name is required.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.Sender.LastName.Length, "Last Name")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.Sender.LastName)
                    @Html.ValidationMessageFor(m => m.package.Sender.LastName, "Last Name is required.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.Sender.Address, "Address")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.Sender.Address)
                    @Html.ValidationMessageFor(m => m.package.Sender.Address, "Address is required.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.Sender.City, "City")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.Sender.City)
                    @Html.ValidationMessageFor(m => m.package.Sender.City, "City is required.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.Sender.StateId, "State")</td>
                <td>
                    @Html.DropDownListFor(m => m.package.Sender.State, Model.StatesList)
                    @Html.ValidationMessageFor(m => m.package.Sender.State, "State is required.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.Sender.Zip, "Zip code")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.Sender.Zip)
                    @Html.ValidationMessageFor(m => m.package.Sender.Zip, "Zip is required.")
                </td>
            </tr>
        </table>
    </fieldset>

    <fieldset>
        <legend>To</legend>
        <table class="FormTable">

            <tr>
                <td>@Html.LabelFor(m => m.package.Recipient.FirstName, "First Name")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.Recipient.FirstName)
                    @Html.ValidationMessageFor(m => m.package.Recipient.FirstName, "First Name is required.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.Recipient.LastName, "Last Name")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.Recipient.LastName)
                    @Html.ValidationMessageFor(m => m.package.Recipient.LastName, "Last Name is required.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.Recipient.Address, "Address")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.Recipient.Address)
                    @Html.ValidationMessageFor(m => m.package.Recipient.Address, "Address is required.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.Recipient.City, "City")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.Recipient.City)
                    @Html.ValidationMessageFor(m => m.package.Recipient.City, "City is required.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.Recipient.StateId, "State")</td>
                <td>
                    @Html.DropDownListFor(m => m.package.Recipient.State, Model.StatesList)
                    @Html.ValidationMessageFor(m => m.package.Recipient.State, "State is required.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.Recipient.Zip, "Zip")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.Recipient.Zip)
                    @Html.ValidationMessageFor(m => m.package.Recipient.Zip, "Zip is required.")
                </td>
            </tr>
        </table>
    </fieldset>

    <fieldset>
        <legend>Shipping Method</legend>
        <table class="FormTable">
            <tr>
                <td>
                    @foreach (var Shipping in Model.ShippingTypeList)
                    {
                        @Html.RadioButtonFor(m => m.shippingType, Shipping.Description) @Shipping.Description
                    }
                </td>
            </tr>
        </table>
    </fieldset>

    <fieldset>
        <legend>Package Information</legend>
        <table class="FormTable">
            <tr>
                <td>@Html.LabelFor(m => m.package.weight, "Weight")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.weight)
                    @Html.ValidationMessageFor(m => m.package.weight, "weight must be greater than one ounce.")
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.package.costPerOunce, "Cost Per Ounce")</td>
                <td>
                    @Html.TextBoxFor(m => m.package.costPerOunce)
                    @Html.ValidationMessageFor(m => m.package.costPerOunce, "Cost Per Ounce must be atleast $1.00")
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.package.totalCost, "shipping cost")
                
                </td>
                <td>
                    @*@Html.TextBoxFor(m => m.package.totalCost)*@
                    @Html.TextBoxFor(m => m.package.totalCost, new { @disabled = "disabled" })
                    @Html.HiddenFor(m => m.package.uniqueId)
                </td>
            </tr>

        </table>
    </fieldset>

    <fieldset>
        <legend>Mailing Label</legend>
        <table>
            <tr>
                <td>
                    <div class="MailingLabel" id="MailingLabel">
                        @*use this helper to display content that has html tags in it*@
                        @Html.Raw(Model.package.HtmlFormattedMailingLabel)
                    </div>
                </td>
            </tr>
        </table>
    </fieldset>
    <fieldset>
        <legend>Actions</legend>
        <table>
            <tr>
                <td>
                    <input type="button" value="Get Mailing Label" id="MailingLabelButton" />
                    <input type="Submit" value="Save" name="button" />
                </td>
              
            </tr>
        </table>
    </fieldset>
}
@section scripts{
    @*Need this for client side data annotations to fire*@
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(function () {
            //handle mailing label button clicked
            $("#MailingLabelButton").click(function () {

                //make sure there are not any validation errors
                if ($("#ShippingForm").valid()) {

                    $.ajax({
                        type: "POST",
                        url: "/Shipping", //post to Shipping controller
                        async: true,
                        data: $("#ShippingForm").serialize(), //this gets the form data
                        dataType: 'json', //data type controller method is returning
                        success: function (data) {
                            console.log(data);
                            //server is now returning json object, set the html
                            //to what is in the package object
                            $("#MailingLabel").html(data.package.HtmlFormattedMailingLabel);


                            //return the total cost
                            var result = $("#TotalCost");
                            result.val(data.package.totalCost)
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            console.log(errorThrown);
                            console.log(XMLHttpRequest);
                        }
                    });
                }
            });
        });
    </script>
}




